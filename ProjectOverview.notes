= Social Feed Project = [12-2-2022]

Learning Objective

To further familiarize yourself with React.js by creating an interactive frontend application with CREATE & READ functionality.

Technologies
React, JavaScript, HTML, CSS

User Stories

Total Unweighted Project Points: /45
Total Weighted Project Points: /50

(5 points): As a developer, I want to make at least 7 good, consistent commits.
(5 points): As a developer, I want to use the Create-React-App to create my React project.
(5 points): As a developer, I want to display all posts (name, body, & liked status) within a feed on the main page.
(10 points): As a developer, I want to create “like” and “dislike” buttons so that I can visually show & toggle between “liking” and “disliking” a post.
(10 points): As a developer, I want to create a form on a separate component so that I can add a new post to the main feed.
(5 points): As a developer, I want to create a minimum of three React components and use them within my application (EX: CreatePost, DisplayPosts, Post, NavBar)
(5 points): As a developer, I want to have an aesthetically pleasing user interface to ensure a great user experience
BONUS:
(5 points): As a developer, I want to add a date to all posts and post creations.


//* Previous Thumbs up and down
//* <HTML>
<button className={`btn ${activeBtn === "like" ? "like-active" : ""}`} onClick={handleLikeClick}><span className='material-symbols-rounded'>thumbs_up</span>Like{likeCount}</button>
<button className={`btn ${activeBtn === "dislike" ? "dislike-active" : ""}`} onClick={handleDislikeClick}><span className='material-symbols-rounded'>thumbs_down</span>Dislike{dislikeCount}</button>

//* JS
const [likeCount, setLikeCount] = useState(0);
const [dislikeCount, setDislikeCount] = useState(0);
const [activeBtn, setActiveBtn] = useState("none");

    const handleLikeClick = () => {
        
        if (activeBtn === "none") {
            setLikeCount (likeCount +1);
            setActiveBtn("like");
            return;
        }

        if (activeBtn === 'like'){
            setLikeCount(likeCount - 1);
            setActiveBtn("none");
            return;
          }
        
        if (activeBtn === "dislike") {
        setLikeCount(likeCount + 1);
        setDislikeCount(dislikeCount - 1);
        setActiveBtn("like");
        }
    };

    const handleDislikeClick = () => {
        
        if (activeBtn === "none") {
            setDislikeCount(dislikeCount + 1);
            setActiveBtn("dislike");
            return;
        }

        if (activeBtn === 'dislike') {
            setDislikeCount(dislikeCount - 1);
            setActiveBtn("none");
            return;
        }

        if (activeBtn === "like") {
        setDislikeCount(dislikeCount + 1);
        setLikeCount(likeCount - 1);
        setActiveBtn("dislike");
        }
    };